const int trigPin = 9; // Pin del disparo del sensor ultrasónico
const int echoPin = 10; // Pin del eco del sensor ultrasónico
long duration;
int distance;
int previousDistance = 0;
int threshold = 30;  // Margen de variación para detectar movimiento significativo
bool isGreeting = false;

const int numReadings = 2; // Número de lecturas para el promedio
int readings[numReadings]; // Arreglo para almacenar las lecturas
int readIndex = 0; // Índice de la lectura actual
int total = 0; // Suma total de las lecturas
int averageDistance = 0; // Distancia promedio

void setup() {
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  Serial.begin(9600);
  
  // Inicializar el arreglo de lecturas
  for (int i = 0; i < numReadings; i++) {
    readings[i] = 0;
  }
}

void loop() {
  // Enviar pulso ultrasónico
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  // Leer el tiempo de vuelta del eco
  duration = pulseIn(echoPin, HIGH);

  // Calcular distancia en cm
  distance = duration * 0.034 / 2;

  // Comparar la distancia actual con la anterior para detectar si se acerca o aleja
  if (distance > 0 && distance < 300) { // Si está en un rango válido
    // Actualizar la suma y el índice para el promedio
    total -= readings[readIndex]; // Restar la lectura más antigua
    readings[readIndex] = distance; // Guardar la nueva lectura
    total += readings[readIndex]; // Sumar la nueva lectura
    readIndex = (readIndex + 1) % numReadings; // Avanzar al siguiente índice

    // Calcular la distancia promedio
    averageDistance = total / numReadings;

    if (averageDistance < previousDistance - threshold && !isGreeting) {
      // Persona se está acercando
      Serial.println("1");  // Enviar señal de saludo
      isGreeting = true;
    } else if (averageDistance > previousDistance + threshold && isGreeting) {
      // Persona se está alejando
      Serial.println("2");  // Enviar señal de despedida
      isGreeting = false;
    }
  }

  previousDistance = averageDistance;  // Actualizar la distancia anterior
  delay(400);  // Dar tiempo para la siguiente lectura
}
